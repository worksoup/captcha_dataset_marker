// MIT License
//
// Copyright (c) 2024 worksoup <https://github.com/worksoup/>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import { SlintPoint } from "types.slint";
import { Eillpse } from "eillpse.slint";
export component ClickCaptchaImage {
    in property <image> image;
    callback push-point(int, int);
    in-out property <[SlintPoint]> points;
    width: 320px;
    height: 160px;
    Rectangle {
        width: root.width;
        height: root.height;
    }

    Image {
        source: image;
    }

    for point in points: Eillpse {
        width: 16px;
        height: 16px;
        x: point.x * 1px - self.width / 2;
        y: point.y * 1px - self.height / 2;
        stroke: red;
        stroke-width: 3px;
    }
    out property <Point> current-point;
    Eillpse {
        width: 20px;
        height: 20px;
        x: touch.mouse-x - self.width / 2;
        y: touch.mouse-y - self.height / 2;
        stroke: green;
        stroke-width: 4px;
    }

    touch := TouchArea {
        pointer-event(event) => {
            if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                current-point.x = touch.mouse-x;
                current-point.y = touch.mouse-y;
            }
        }
        clicked => {
            push-point(root.current-point.x / 1px, root.current-point.y / 1px);
        }
    }
}